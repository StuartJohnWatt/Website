world_total_plot <- world_total %>%
pivot_longer(cols = c("Cases", "Fatalities"), names_to = "Type", values_to = "Confirmed") %>%
rename("Date" = "date") %>%
ggplot(aes(x = Date, y = Confirmed, colour = Type)) +
geom_line() +
geom_point() +
scale_color_manual(values = c("red", "black")) +
scale_y_continuous(labels = label_number_si(accuracy = 0.1)) +
xlab("Date") +
ylab("Confirmed Total") +
ggtitle("COVID-19 World Data")
world_total_plot()
world_total_plot
blogdown::serve_site()
servr::daemon_stop()
servr::daemon_list()
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, out.width = "100%", fig.align = "centre")
library(tidyverse)
library(lubridate)
library(RcppRoll)
library(purrr)
library(scales)
library(magrittr)
library(ISOcodes)
library(readxl)
library(httr)
library(wbstats)
library(maps)
library(plotly)
library(viridis)
library(gifski)
library(png)
library(rgdal)
library(leaflet)
library(widgetframe)
data_path <- "data/ecdc.xlsx"
if(!file.exists(data_path)) file.create(data_path)
get_data <- function(path){
download <- function(datetime){
url <- paste("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-", format(datetime, "%Y-%m-%d"), ".xlsx", sep = "")
GET(url, authenticate(":", ":", type="ntlm"), write_disk(path, overwrite = TRUE))
return(read_xlsx(path))
}
tryCatch(
download(Sys.time()),
error = function(e) download(Sys.time() - days(1))
) %>% return()
}
covid <- get_data(data_path) %>%
select(-c(day, month, year)) %>%
mutate_at(vars("dateRep"), as_date) %>%
mutate_at(vars("cases", "deaths"), as.integer) %>%
mutate_at(vars("countriesAndTerritories", "geoId"), as_factor) %>%
rename(date = dateRep, new_cases = cases, new_deaths = deaths, region = `countriesAndTerritories`) %>%
complete(date, nesting(region, geoId)) %>%
group_by(region) %>%
arrange(date) %>%
mutate(tot_cases = as.integer(cumsum(replace_na(new_cases, 0))),
tot_deaths = as.integer(cumsum(replace_na(new_deaths, 0))),
past_3day_cases = as.integer(roll_sumr(new_cases, n = 3L, na.rm = TRUE))) %>%
ungroup() %>%
select(date, region, geoId, everything()) %>%
arrange(region, desc(date)) %>%
mutate_at(vars("geoId"), ~recode(.,
"UK" = "GB",
"EL" = "GR",
"PYF" = "PF",
"BLM" = "BL",
"Saint Eustatius and Saba" = "BQ"))
if(covid %>%
select(date, region) %>%
group_by(region) %>%
arrange(desc(date)) %>%
mutate(date_diff = lag(date) - date) %>%
ungroup() %>%
select(date_diff) %>%
filter(!is.na(date_diff)) %>%
distinct() %$%
max(date_diff) %>%
as.integer() > 1) stop("date difference error")
pop_data <- wb(indicator = "SP.POP.TOTL", startdate = 2010, enddate = 2020, country = unique(covid$geoId)) %>%
as_tibble() %>%
select(-c(indicatorID, indicator)) %>%
rename(population = value) %>%
mutate_at(vars(date, population), as.integer) %>%
group_by(iso3c, iso2c, country) %>%
top_n(1, wt = date) %>%
select(-date)
position_data <- wbcountries() %>%
as_tibble() %>%
select(iso3c, iso2c, country, long, lat) %>%
mutate_at(vars(long, lat), as.double)
country_data <- left_join(pop_data, position_data, c("iso3c", "iso2c", "country"))
# Complete missing data. Good website: https://gps-coordinates.org
country_data[country_data$country == "Gibraltar", c("long", "lat")] <- c(36.1408, 5.3536)
country_data[country_data$country == "West Bank and Gaza", c("long", "lat")] <- c(35.3027, 31.9466)
country_data[country_data$country == "Curacao", c("long", "lat")] <- c(-68.981745, 12.178308)
country_data[country_data$country == "Sint Maarten (Dutch part)", c("long", "lat")] <- c(-63.049271, 18.025281)
# Check data
if ((country_data %>% group_by(country, iso3c, iso2c) %>% tally %>% filter(n > 1) %>% nrow()) != 0) stop("Non-unique country data")
if ((country_data %>% filter(is.na(long)|is.na(lat)) %>% nrow()) != 0) stop("Missing coordinate data")
# remove redundant tables
rm(pop_data, position_data)
covid <- covid %>%
left_join(country_data, by = c("geoId" = "iso2c"))
missing_data <- tribble(
~region, ~population, ~lat, ~long,
"French_Polynesia", 283007, -17.6797, -149.4068,
"Guernsey", 66697, 49.4656,	-2.5852,
"Holy_See", 1000, 41.9029,	12.4533,
"Jersey", 97857, 49.2144,	-2.13125,
"Montserrat", 5900, 16.7424,	-62.1873,
"Netherlands_Antilles", 227049, 12.226079, -69.060087,
"Taiwan", 23.6e6, 23.6978, 120.9605,
"Anguilla", 15094, 18.2205544, -63.068615,
"Falkland_Islands_(Malvinas)", 3398, -51.7, -57.85,
"Bonaire, Saint Eustatius and Saba", 25157, 12.201890, -68.262383,
"Saint_Barthelemy", 9793, 17.8999996, -62.8333321
)
covid <- covid %>% left_join(missing_data, by = c("region")) %>%
mutate(population = coalesce(population.x, as.integer(population.y)),
lat = coalesce(lat.x, lat.y),
long = coalesce(long.x, long.y)) %>%
select(-c(long.x, long.y, lat.x, lat.y, population.x, population.y)) %>%
mutate_at(vars(region, geoId, iso3c), as.factor) %>%
mutate(tot_cases_per_million = tot_cases / population * 1e6,
tot_deaths_per_million = tot_deaths / population * 1e6)
# --- To check if non-mathcing country names are associated ---
# covid %>%
#   select(region, country) %>%
#   filter(region != country) %>%
#   distinct()
# --- To update missing_data table ---
#anti_join(covid, country_data, by = c("geoId" = "iso2c")) %>% select(region, geoId) %>% distinct()
# --- Find regions with missing coords and population ---
# covid %>%
#   filter(is.na(long)|is.na(lat)|is.na(population)) %>%
#   select(region) %>%
#   distinct()
# --- Check for missing data other than "cases_on_an_international_conveyance_Japan" ---
if(covid %>%
select(region, geoId, population, lat, long) %>%
filter(is.na(population) | is.na(lat) | is.na(long), region != "Cases_on_an_international_conveyance_Japan") %>%
distinct() %>%
nrow() != 0L) stop("Missing data (coordinate or population)")
covid %>% filter(geoId == "GB")
covid %>% filter(geoId == "GB") %>% print(n = Inf)
blogdown::serve_site()
servr::daemon_stop(1)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, out.width = "100%", fig.align = "centre")
library(tidyverse)
library(lubridate)
library(RcppRoll)
library(purrr)
library(scales)
library(magrittr)
library(ISOcodes)
library(readxl)
library(httr)
library(wbstats)
library(maps)
library(plotly)
library(viridis)
library(gifski)
library(png)
library(rgdal)
library(leaflet)
library(widgetframe)
data_path <- "data/ecdc.xlsx"
if(!file.exists(data_path)) file.create(data_path)
get_data <- function(path){
download <- function(datetime){
url <- paste("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-", format(datetime, "%Y-%m-%d"), ".xlsx", sep = "")
GET(url, authenticate(":", ":", type="ntlm"), write_disk(path, overwrite = TRUE))
return(read_xlsx(path))
}
tryCatch(
download(Sys.time()),
error = function(e) download(Sys.time() - days(1))
) %>% return()
}
covid <- get_data(data_path) %>%
select(-c(day, month, year)) %>%
mutate_at(vars("dateRep"), as_date) %>%
mutate_at(vars("cases", "deaths"), as.integer) %>%
mutate_at(vars("countriesAndTerritories", "geoId"), as_factor) %>%
rename(date = dateRep, new_cases = cases, new_deaths = deaths, region = `countriesAndTerritories`) %>%
complete(date, nesting(region, geoId)) %>%
group_by(region) %>%
arrange(date) %>%
mutate(tot_cases = as.integer(cumsum(replace_na(new_cases, 0))),
tot_deaths = as.integer(cumsum(replace_na(new_deaths, 0))),
past_3day_cases = as.integer(roll_sumr(new_cases, n = 3L, na.rm = TRUE))) %>%
ungroup() %>%
select(date, region, geoId, everything()) %>%
arrange(region, desc(date)) %>%
mutate_at(vars("geoId"), ~recode(.,
"UK" = "GB",
"EL" = "GR",
"PYF" = "PF",
"BLM" = "BL",
"Saint Eustatius and Saba" = "BQ"))
if(covid %>%
select(date, region) %>%
group_by(region) %>%
arrange(desc(date)) %>%
mutate(date_diff = lag(date) - date) %>%
ungroup() %>%
select(date_diff) %>%
filter(!is.na(date_diff)) %>%
distinct() %$%
max(date_diff) %>%
as.integer() > 1) stop("date difference error")
pop_data <- wb(indicator = "SP.POP.TOTL", startdate = 2010, enddate = 2020, country = unique(covid$geoId)) %>%
as_tibble() %>%
select(-c(indicatorID, indicator)) %>%
rename(population = value) %>%
mutate_at(vars(date, population), as.integer) %>%
group_by(iso3c, iso2c, country) %>%
top_n(1, wt = date) %>%
select(-date)
position_data <- wbcountries() %>%
as_tibble() %>%
select(iso3c, iso2c, country, long, lat) %>%
mutate_at(vars(long, lat), as.double)
country_data <- left_join(pop_data, position_data, c("iso3c", "iso2c", "country"))
# Complete missing data. Good website: https://gps-coordinates.org
country_data[country_data$country == "Gibraltar", c("long", "lat")] <- c(36.1408, 5.3536)
country_data[country_data$country == "West Bank and Gaza", c("long", "lat")] <- c(35.3027, 31.9466)
country_data[country_data$country == "Curacao", c("long", "lat")] <- c(-68.981745, 12.178308)
country_data[country_data$country == "Sint Maarten (Dutch part)", c("long", "lat")] <- c(-63.049271, 18.025281)
# Check data
if ((country_data %>% group_by(country, iso3c, iso2c) %>% tally %>% filter(n > 1) %>% nrow()) != 0) stop("Non-unique country data")
if ((country_data %>% filter(is.na(long)|is.na(lat)) %>% nrow()) != 0) stop("Missing coordinate data")
# remove redundant tables
rm(pop_data, position_data)
covid <- covid %>%
left_join(country_data, by = c("geoId" = "iso2c"))
missing_data <- tribble(
~region, ~population, ~lat, ~long,
"French_Polynesia", 283007, -17.6797, -149.4068,
"Guernsey", 66697, 49.4656,	-2.5852,
"Holy_See", 1000, 41.9029,	12.4533,
"Jersey", 97857, 49.2144,	-2.13125,
"Montserrat", 5900, 16.7424,	-62.1873,
"Netherlands_Antilles", 227049, 12.226079, -69.060087,
"Taiwan", 23.6e6, 23.6978, 120.9605,
"Anguilla", 15094, 18.2205544, -63.068615,
"Falkland_Islands_(Malvinas)", 3398, -51.7, -57.85,
"Bonaire, Saint Eustatius and Saba", 25157, 12.201890, -68.262383,
"Saint_Barthelemy", 9793, 17.8999996, -62.8333321
)
covid <- covid %>% left_join(missing_data, by = c("region")) %>%
mutate(population = coalesce(population.x, as.integer(population.y)),
lat = coalesce(lat.x, lat.y),
long = coalesce(long.x, long.y)) %>%
select(-c(long.x, long.y, lat.x, lat.y, population.x, population.y)) %>%
mutate_at(vars(region, geoId, iso3c), as.factor) %>%
mutate(tot_cases_per_million = tot_cases / population * 1e6,
tot_deaths_per_million = tot_deaths / population * 1e6)
# --- To check if non-mathcing country names are associated ---
# covid %>%
#   select(region, country) %>%
#   filter(region != country) %>%
#   distinct()
# --- To update missing_data table ---
#anti_join(covid, country_data, by = c("geoId" = "iso2c")) %>% select(region, geoId) %>% distinct()
# --- Find regions with missing coords and population ---
# covid %>%
#   filter(is.na(long)|is.na(lat)|is.na(population)) %>%
#   select(region) %>%
#   distinct()
# --- Check for missing data other than "cases_on_an_international_conveyance_Japan" ---
if(covid %>%
select(region, geoId, population, lat, long) %>%
filter(is.na(population) | is.na(lat) | is.na(long), region != "Cases_on_an_international_conveyance_Japan") %>%
distinct() %>%
nrow() != 0L) stop("Missing data (coordinate or population)")
world_total <- covid %>%
select(date, region, tot_cases, tot_deaths) %>%
group_by(date) %>%
summarise(Cases = sum(tot_cases, na.rm = TRUE), Fatalities = sum(tot_deaths, na.rm = TRUE)) %>%
ungroup()
if(!file.exists("data/world_shape_file.zip")){
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="data/world_shape_file.zip")
dir.create("data/world_shape_file/")
unzip("data/world_shape_file.zip", exdir = "data/world_shape_file")
}
world_spdf <- readOGR(
dsn= paste0(getwd(),"/data/world_shape_file") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
world_spdf@data <- covid %>%
filter(date == max(date), region != "Cases_on_an_international_conveyance_Japan") %>%
right_join(world_spdf@data, by = c("geoId" = "ISO2"))
text_popup <- paste("Country: ", world_spdf@data$NAME, "<br/>",
"Conf. cases: ", world_spdf@data$tot_cases, "<br/>",
"Conf. deaths: ", world_spdf@data$tot_deaths, "<br/>",
"Conf. cases p.million: ", round(world_spdf@data$tot_cases_per_million, 2), "<br/>",
"Conf. deaths p.million: ", round(world_spdf@data$tot_deaths_per_million, 2), "<br/>",
sep="") %>%
lapply(htmltools::HTML)
colMap_1 <- colorNumeric("GnBu", domain = NULL)
colMap_2 <- colorNumeric("YlOrRd", domain = NULL)
m <- leaflet(world_spdf) %>%
addTiles() %>%
setView(lat=10, lng=0, zoom=2) %>%
addPolygons(fillOpacity = 0.8,
color = ~colMap_1(tot_cases_per_million %>% log()),
stroke = FALSE,
label = text_popup,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"),
group = "Cases") %>%
addPolygons(fillOpacity = 0.8,
color = ~colMap_2(world_spdf$tot_deaths_per_million %>% log() %>% map_dbl(~ifelse(is.finite(.),.,))),
stroke = FALSE,
label = text_popup,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"),
group = "Deaths") %>%
# Layers control
addLayersControl(
baseGroups = c("Cases", "Deaths"),
options = layersControlOptions(collapsed = FALSE)
)
if(!file.exists("data/world_shape_file.zip")){
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="data/world_shape_file.zip")
dir.create("data/world_shape_file/")
unzip("data/world_shape_file.zip", exdir = "data/world_shape_file")
}
world_spdf <- readOGR(
dsn= paste0(getwd(),"/data/world_shape_file") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
world_spdf@data <- covid %>%
filter(date == max(date), region != "Cases_on_an_international_conveyance_Japan") %>%
right_join(world_spdf@data, by = c("geoId" = "ISO2"))
text_popup <- paste("Country: ", world_spdf@data$NAME, "<br/>",
"Conf. cases: ", world_spdf@data$tot_cases, "<br/>",
"Conf. deaths: ", world_spdf@data$tot_deaths, "<br/>",
"Conf. cases p.million: ", round(world_spdf@data$tot_cases_per_million, 2), "<br/>",
"Conf. deaths p.million: ", round(world_spdf@data$tot_deaths_per_million, 2), "<br/>",
sep="") %>%
lapply(htmltools::HTML)
colMap_1 <- colorNumeric("GnBu", domain = NULL)
colMap_2 <- colorNumeric("YlOrRd", domain = NULL)
m <- leaflet(world_spdf) %>%
addTiles() %>%
setView(lat=10, lng=0, zoom=2) %>%
addPolygons(fillOpacity = 0.8,
color = ~colMap_1(tot_cases_per_million %>% log()),
stroke = FALSE,
label = text_popup,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"),
group = "Cases") %>%
addPolygons(fillOpacity = 0.8,
color = ~colMap_2(world_spdf$tot_deaths_per_million %>% log() %>% map_dbl(~ifelse(is.finite(.x),.x,))),
stroke = FALSE,
label = text_popup,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"),
group = "Deaths") %>%
# Layers control
addLayersControl(
baseGroups = c("Cases", "Deaths"),
options = layersControlOptions(collapsed = FALSE)
)
if(!file.exists("data/world_shape_file.zip")){
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="data/world_shape_file.zip")
dir.create("data/world_shape_file/")
unzip("data/world_shape_file.zip", exdir = "data/world_shape_file")
}
world_spdf <- readOGR(
dsn= paste0(getwd(),"/data/world_shape_file") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
world_spdf@data <- covid %>%
filter(date == max(date), region != "Cases_on_an_international_conveyance_Japan") %>%
right_join(world_spdf@data, by = c("geoId" = "ISO2"))
text_popup <- paste("Country: ", world_spdf@data$NAME, "<br/>",
"Conf. cases: ", world_spdf@data$tot_cases, "<br/>",
"Conf. deaths: ", world_spdf@data$tot_deaths, "<br/>",
"Conf. cases p.million: ", round(world_spdf@data$tot_cases_per_million, 2), "<br/>",
"Conf. deaths p.million: ", round(world_spdf@data$tot_deaths_per_million, 2), "<br/>",
sep="") %>%
lapply(htmltools::HTML)
colMap_1 <- colorNumeric("GnBu", domain = NULL)
colMap_2 <- colorNumeric("YlOrRd", domain = NULL)
m <- leaflet(world_spdf) %>%
addTiles() %>%
setView(lat=10, lng=0, zoom=2) %>%
addPolygons(fillOpacity = 0.8,
color = ~colMap_1(tot_cases_per_million %>% log()),
stroke = FALSE,
label = text_popup,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"),
group = "Cases") %>%
addPolygons(fillOpacity = 0.8,
color = ~colMap_2(world_spdf$tot_deaths_per_million %>% log() %>% map_dbl(~ifelse(is.finite(.x),.x,NA))),
stroke = FALSE,
label = text_popup,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"),
group = "Deaths") %>%
# Layers control
addLayersControl(
baseGroups = c("Cases", "Deaths"),
options = layersControlOptions(collapsed = FALSE)
)
frameWidget(m)
# m <- leaflet(world_spdf) %>%
#   addTiles() %>%
#   setView(lat=10, lng=0, zoom=2) %>%
#   addPolygons(fillOpacity = 0.8,
#               color = ~colorQuantile("YlOrRd", tot_cases_per_million, n = 9)(tot_cases_per_million),
#               stroke = FALSE,
#               label = text_popup,
#               labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),
#                                           textsize = "13px",
#                                           direction = "auto"))
#
# frameWidget(m)
blogdown::serve_site()
if(!file.exists("data/world_shape_file.zip")){
download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="data/world_shape_file.zip")
dir.create("data/world_shape_file/")
unzip("data/world_shape_file.zip", exdir = "data/world_shape_file")
}
world_spdf <- readOGR(
dsn= paste0(getwd(),"/data/world_shape_file") ,
layer="TM_WORLD_BORDERS_SIMPL-0.3",
verbose=FALSE
)
world_spdf@data <- covid %>%
filter(date == max(date), region != "Cases_on_an_international_conveyance_Japan") %>%
right_join(world_spdf@data, by = c("geoId" = "ISO2"))
text_popup <- paste("Country: ", world_spdf@data$NAME, "<br/>",
"Conf. cases: ", world_spdf@data$tot_cases, "<br/>",
"Conf. deaths: ", world_spdf@data$tot_deaths, "<br/>",
"Conf. cases p.million: ", round(world_spdf@data$tot_cases_per_million, 2), "<br/>",
"Conf. deaths p.million: ", round(world_spdf@data$tot_deaths_per_million, 2), "<br/>",
sep="") %>%
lapply(htmltools::HTML)
colMap_1 <- colorNumeric("GnBu", domain = NULL)
colMap_2 <- colorNumeric("YlOrRd", domain = NULL)
m <- leaflet(world_spdf) %>%
addTiles() %>%
setView(lat=10, lng=0, zoom=2) %>%
addPolygons(fillOpacity = 0.8,
color = ~colMap_1(tot_cases_per_million %>% log()),
stroke = FALSE,
label = text_popup,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"),
group = "Cases") %>%
addPolygons(fillOpacity = 0.8,
color = ~colMap_2(world_spdf$tot_deaths_per_million %>% log() %>% map_dbl(~ifelse(is.finite(.x),.x,NA))),
stroke = FALSE,
label = text_popup,
labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"),
group = "Deaths") %>%
# Layers control
addLayersControl(
baseGroups = c("Cases", "Deaths"),
options = layersControlOptions(collapsed = FALSE)
)
frameWidget(m)
# m <- leaflet(world_spdf) %>%
#   addTiles() %>%
#   setView(lat=10, lng=0, zoom=2) %>%
#   addPolygons(fillOpacity = 0.8,
#               color = ~colorQuantile("YlOrRd", tot_cases_per_million, n = 9)(tot_cases_per_million),
#               stroke = FALSE,
#               label = text_popup,
#               labelOptions = labelOptions(style = list("font-weight" = "normal", padding = "3px 8px"),
#                                           textsize = "13px",
#                                           direction = "auto"))
#
# frameWidget(m)
blogdown::serve_site()
covid %>% filter(geoId == "GB")
servr::daemon_stop()
servr::daemon_list()
covid %>% filter(geoId == "UK") %>% select(-c(popData2018,country))
covid %>% filter(geoId == "GB") %>% select(-c(popData2018,country))
covid %>% filter(geoId == "US") %>% select(-c(popData2018,country))
covid %>% filter(geoId == "GB") %>% select(-c(popData2018,country))
covid %>% filter(geoId == "GB") %>% select(-c(popData2018,country)) %>% print(n = Inf)
covid %>% filter(geoId == "GB") %>% select(-c(popData2018,country)) %>% print(n = 50)
covid %>% filter(geoId == "GB") %>% select(-c(popData2018,country)) %>%
ggplot(aes(x = date, y = tot_deaths)) + geom_point() + geom_line()
ggplot(aes(x = date, y = tot_deaths)) + geom_point() + geom_line() + scale_y_log10()
covid %>% filter(geoId == "GB") %>% select(-c(popData2018,country)) %>% ggplot(aes(x = date, y = tot_deaths)) + geom_point() + geom_line() + scale_y_log10()
covid %>% filter(geoId == "GB", tot_deaths > 0) %>% select(-c(popData2018,country)) %>% ggplot(aes(x = date, y = tot_deaths)) + geom_point() + geom_line() + scale_y_log10()
covid %>% filter(geoId == "GB", tot_deaths > 0) %>% select(-c(popData2018,country)) %>% ggplot(aes(x = date, y = tot_deaths)) + geom_point() + geom_line() + scale_y_log10() + ggtitle("UK Confirmed Deaths", subtitle = "Stuart Watt, Data from ECDC")
covid %>% filter(geoId == "GB", tot_deaths > 0) %>% select(-c(popData2018,country)) %>% ggplot(aes(x = date, y = tot_deaths)) + geom_point() + geom_line() + scale_y_log10() + ggtitle("UK Confirmed Deaths", subtitle = "Data from ECDC")
covid %>% filter(geoId == "GB", tot_deaths > 0) %>% select(-c(popData2018,country)) %>% ggplot(aes(x = date, y = tot_deaths)) + geom_point() + geom_line() + scale_y_log10() + ggtitle("UK Confirmed Deaths (log-lin plot)", subtitle = "Data from ECDC")
